<!--- gpx-map is a custom element that displays a map with a GPX file overlay. The GPX file is a GPS Exchange Format file that contains the path of a walk. The map is built using the Leaflet library, and the GPX file is added to the map using the Leaflet-GPX plugin. --->

<div class="map" :id="uid"></div>

<style webc:scoped>
  :host {
    display: block;
    padding: var(--space-s);
    position: sticky;
    top: 20vw;
  }

  :host:not(:defined) > .map {
    visibility: hidden;
  }

  :host > .map {
    border-radius: 16px;
    box-shadow: var(--shadow-elevation-medium);
    height: 60vh;
  }

  :host .photo-marker {
    text-decoration: none;
    font-weight: 500;
    text-align: center;
  }

  :host .photo-marker i {
    color: #999;
    display: block;
  }

  :host .photo-marker:hover {
    text-decoration: underline;
  }

  :host .leaflet-popup-close-button {
    display: none;
  }
</style>

<script>
  class GpxMap extends HTMLElement {
    connectedCallback() {
      // Get the WebC uid of the map element
      const uid = this.querySelector('.map').getAttribute('id');
      const gpxFile = '/assets/files/gpx/' + this.getAttribute('file');

      const startLat = parseFloat(this.getAttribute('startLat'));
      const startLong = parseFloat(this.getAttribute('startLong'));
      const zoomLevel = 13;

      let map = L.map(uid).setView([startLat, startLong], zoomLevel);

      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(map);

      L.control.scale().addTo(map);

      let cameraIcon = L.icon({
        iconUrl: '/assets/images/marker-icon-camera.svg',
        iconSize: [24, 24],
        iconAnchor: [16, 16],
        popupAnchor: [-8, -16],
      });

      // Add GPX file
      new L.GPX(gpxFile, {
        async: true,
        polyline_options: {
          color: '#ff4545',
          opacity: 0.9,
          weight: 4,
          lineCap: 'round',
        },
        markers: {
          startIcon: '/assets/images/marker-icon-start.svg',
          endIcon: '/assets/images/marker-icon-end.svg',
          wptIcons: { null: null },
        },
        marker_options: {
          iconSize: [18, 18],
          iconAnchor: [13, 10],
        },
      })
        .on('loaded', function (e) {
          map.fitBounds(e.target.getBounds());
        })
        .addTo(map);

      // Render markers for photos
      const markers = document.querySelectorAll('.marker');
      markers.forEach((marker) => {
        const lat = marker.getAttribute('data-lat');
        const lon = marker.getAttribute('data-lon');
        // @TODO decouple from heading level
        const id = marker.querySelector('h2').getAttribute('id');
        // @TODO decouple from heading level
        // childNodes[0] is the textnode and leaves out the binomial name
        const title = marker.querySelector('h2 > a').childNodes[0].textContent;
        const caption = marker.querySelector('img').getAttribute('alt');
        L.marker([lat, lon], { icon: cameraIcon })
          .addTo(map)
          .bindPopup(
            `<a href="#${id}" class="photo-marker">${title}<i>(${caption})</i></a>`
          );
      });
    }
  }
  customElements.define('gpx-map', GpxMap);
</script>
