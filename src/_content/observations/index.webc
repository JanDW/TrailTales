---
layout: layout
permalink: /observations/index.html
---

<p>
  observations to date:
  <span webc:if="observations.all.length === 0">No observations yet.</span>
  <span webc:else @text="observations.all.length"></span>
</p>

<ul>
  <div webc:nokeep webc:for="observation of observations.all">
    <li class="observation" webc:if="observation.taxon">
      <h2 @text="observation.taxon.preferred_common_name"></h2>
      <p @text="observation.taxon.name"></p>
      <!-- Link to taxa -->
      <a :href="`https://www.inaturalist.org/taxa/${observation.taxon.id}`">Taxon on iNaturalist</a>
      <p @text="observation.description"></p>
      <p @text="observation.place_guess"></p>

      <a :href="observation.uri">Observation on iNaturalist</a>
      <!-- wikipedia excerpt -->
      <script webc:type="js">
        async function getWikipediaSummary(taxonId) {
          try {
            const requestUrl = `https://api.inaturalist.org/v1/taxa/${taxonId}`;
            const response = await fetch(requestUrl);
            const data = await response.json();
            return data.results[0].wikipedia_summary;
          } catch (error) {
            return 'Wikipedia excerpt not available';
          }
        }
        // Immediately invoke an async function to use await
        (async () => {
          return `${await getWikipediaSummary(observation.taxon.id)}`;
        })();
      </script>
      <a :href="observation.taxon.wikipedia_url">Continue reading on Wikipedia</a>
      <time
        :@value="observation.time_observed_at"
        @format=" LLL d, yyyy"
      ></time>
      <span @text="` at `" webc:nokeep></span>
      <time :@value="observation.time_observed_at" @format="h:mm a"></time>

      <div class="geo">
        <!--- GeoJSON coordinates are ordered as `longitude, latitude` --->
        <span class="latitude" @text="`Latitude: ${observation.geojson.coordinates[1]}`"></span>
        <span class="longitude" @text="`Longitude: ${observation.geojson.coordinates[0]}`"></span>
        <!--- This link takes `latitude, longitude`-->
        <a :href="`https://maps.apple.com/?q=${observation.geojson.coordinates[1]},${observation.geojson.coordinates[0]}`">Open in Apple Maps</a>
      </div>
      

      <!-- <div webc:nokeep webc:for="photo of observation.photos">
        <img :src="`https://inaturalist-open-data.s3.amazonaws.com/photos/${photo.id}/medium.jpeg`" :alt="" />
      </div> -->

      <!-- Taxa -->
      <table>
        <thead>
          <tr>
            <th>Image</th>
            <th>Rank</th>
            <th>Name</th>
          </tr>
        </thead>
        <tbody>
          <tr
            webc:for="ancestor of observation.identifications[0].taxon.ancestors"
          >
            <td>
              <img 
                webc:if="ancestor.default_photo"
                :src="ancestor.default_photo.square_url"
                alt="`${ancestor.rank}: ${ancestor.name}`"
              /> 
            </td>
            <td @text="ancestor.rank"></td>
            <td><a :href="`https://www.inaturalist.org/taxa/${ancestor.id}`"><span @text="ancestor.name" webc:nokeep></span></a></td>
          </tr>
        </tbody>
      </table>
      <script webc:type="js">
        async function checkImageExists(url) {
          try {
            // Use HEAD request to check if image exists, this prevents downloading the image
            const response = await fetch(url, { method: 'HEAD' });
            return response.ok;
          } catch (error) {
            return false;
          }
        }

        async function getImageUrl(photoId) {
          const jpegUrl = `https://inaturalist-open-data.s3.amazonaws.com/photos/${photoId}/medium.jpeg`;
          const jpgUrl = `https://inaturalist-open-data.s3.amazonaws.com/photos/${photoId}/medium.jpg`;

          if (await checkImageExists(jpegUrl)) {
            return jpegUrl;
          } else if (await checkImageExists(jpgUrl)) {
            return jpgUrl;
          } else {
            return 'borked image url!'; // @TODO return a placeholder image
          }
        }

        async function getPhotoHtml(photoId) {
          const photoUrl = await getImageUrl(photoId);
          return `<img src="${photoUrl}" alt="" />`;
        }

        async function getPhotosHtml(photos) {
          let outputHtml = '';

          const promises = photos.map(async (photo) => {
            const photoHtml = await getPhotoHtml(photo.id);
            outputHtml += photoHtml;
          });

          await Promise.all(promises);
          return outputHtml;
        }

        // Immediately invoke an async function to use await
        (async () => {
          return `${await getPhotosHtml(observation.photos)}`;
        })();
      </script>
    </li>
  </div>
</ul>
